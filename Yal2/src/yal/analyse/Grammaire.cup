package yal.analyse ;

import yal.analyse.tds.*;
import yal.analyse.tds.entree.*;
import yal.analyse.tds.symbole.*;
import java.util.*;
import yal.arbre.* ;
import yal.arbre.expressions.* ;
import yal.arbre.instructions.* ;
import yal.arbre.instructions.affectation.* ;
import yal.arbre.expressions.* ;
import yal.exceptions.AnalyseSyntaxiqueException;
import yal.arbre.expressions.expressionBinaire.*;
import yal.arbre.expressions.expressionBinaire.expressionArithmetique.*;
import yal.arbre.expressions.expressionBinaire.expressionLogique.*;
import yal.arbre.expressions.expressionUnaire.*;
import yal.arbre.expressions.expressionUnaire.expressionArithmetique.*;
import yal.arbre.expressions.expressionUnaire.expressionLogique.*;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info){

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non terminée") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info){
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, ECRIRE, LIRE, EGAL, PARFERMER, PAROUVERT, TANTQUE, FINTANTQUE, REPETER, SI, ALORS, SINON, FINSI;
terminal String    IDF, CSTENTIERE, TYPE, EGALLOGIQUE, OU, ET, DIFFERENT, INFERIEUR, SUPERIEUR, NON, ADDITION, MOINS, DIVISION, MULTIPLICATION;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, INST, LDECL, DECL, AFF, BOUCLE, CONDITION ;
non terminal Expression EXP, OPERBINAIRE, OPERUNAIRE;

precedence left EGALLOGIQUE, OU, ET, DIFFERENT, INFERIEUR, SUPERIEUR, NON, ADDITION, MOINS, DIVISION, MULTIPLICATION;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;
/*  Programme posséde au moins une instruction, les declarations se trouve avant les instructions
    les declarations ne sont pas garder dans l'arbre abstrait mais seulement les declarations simpre
    (les intialisations a 0)
 */
PROG    ::=     PROGRAMME  IDF  DEBUT  LINST:li  FIN
                {:
                    Programme p = new Programme(0,(BlocDInstructions) li);
                    RESULT = p;
                :}
        |
                PROGRAMME  IDF  DEBUT  LDECL:ld  LINST:li  FIN
                {:
                    BlocDInstructions b = new BlocDInstructions(ldleft+1);
                    b.ajouter(ld);
                    b.ajouter(li);
                    Programme p = new Programme(0,(BlocDInstructions) b);
                    RESULT = p;
                :}
        ;

LINST   ::=     LINST:li  INST:i
                {:
                    ((BlocDInstructions)li).ajouter(i) ;
                    RESULT = li ;
                :}
        |
                INST:i
                {:
                    BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                    b.ajouter(i) ;
                    RESULT = b ;
                :}
        ;

LDECL   ::=     LDECL:li DECL:i
                {:
                    ((BlocDInstructions)li).ajouter(i) ;
                    RESULT = li ;
                :}
        |
                DECL:i
                {:
                    BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                    b.ajouter(i) ;
                    RESULT = b ;
                :}
        ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
        |
                LIRE IDF:i POINTVIRGULE
                {: RESULT = new Lire(new Variable(ileft+1,i), ileft + 1); :}
        |
                AFF:i POINTVIRGULE
                {: RESULT = i;  :}
        |
                BOUCLE:i
                {: RESULT = i; :}
        |
                CONDITION:i
                {: RESULT = i; :}
        ;

BOUCLE  ::=     TANTQUE EXP:e REPETER LINST:l FINTANTQUE
                {: RESULT = new Boucle(eleft+1,e,l); :}
        ;

CONDITION ::=   SI EXP:e ALORS LINST:alors SINON LINST:sinon FINSI
                {: RESULT = new Condition(eleft + 1, e, alors, sinon); :}
        ;

DECL    ::=     TYPE:t IDF:i POINTVIRGULE
                {:
                    TDS instance = TDS.getInstance();
                    instance.ajouter(new EntreeVariable(i, ileft+1), new SymboleVariable(instance.creerDeplacement(),t));
                    RESULT = new AffectationSimple(ileft + 1,new ConstanteEntiere("0",ileft + 1),new Variable(ileft+1,i));
                :}
        ;

AFF     ::=     IDF:i EGAL EXP:e
                {: RESULT = new AffectationSimple(eleft + 1,e,new Variable(eleft+1,i)); :}
        ;

EXP     ::=    OPERUNAIRE:o
               {:
               RESULT = o;
               :}
        |
               OPERBINAIRE:o
               {:
               RESULT = o; :}
        |
               PAROUVERT EXP:e PARFERMER
               {: RESULT = e; :}
        |
               CSTENTIERE:c
               {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
        |
               IDF:i
               {: RESULT = new Variable(ileft + 1,i); :}

        ;

OPERBINAIRE    ::= EXP:g EGALLOGIQUE:e EXP:d
               {: RESULT = new Egal(eleft + 1,g,d); :}
        |
               EXP:g OU:e EXP:d
               {: RESULT = new Ou(eleft + 1,g,d); :}
        |
               EXP:g ET:e EXP:d
               {: RESULT = new Et(eleft + 1,g,d); :}
        |
               EXP:g DIFFERENT:e EXP:d
               {: RESULT = new Different(eleft + 1,g,d); :}
        |
               EXP:g INFERIEUR:e EXP:d
               {: RESULT = new Inferieur(eleft + 1,g,d); :}
        |
               EXP:g SUPERIEUR:e EXP:d
               {: RESULT = new Superieur(eleft + 1,g,d); :}
        |
               EXP:g ADDITION:e EXP:d
               {: RESULT = new Addition(eleft + 1,g,d); :}
        |
               EXP:g MOINS:e EXP:d
               {: RESULT = new Soustraction(eleft + 1,g,d); :}
        |
               EXP:g DIVISION:e EXP:d
               {: RESULT = new Division(eleft + 1,g,d); :}
        |
               EXP:g MULTIPLICATION:e EXP:d
               {: RESULT = new Multiplication(eleft + 1,g,d); :}
        ;


OPERUNAIRE  ::= MOINS:e EXP:g
                {: RESULT = new Negatif(eleft + 1,g); :}
        |
                NON:e EXP:g
                {: RESULT = new Non(eleft + 1,g); :}
        ;