package yal.analyse ;

import yal.analyse.tds.*;
import yal.analyse.tds.entree.*;
import yal.analyse.tds.symbole.*;
import java.util.*;
import yal.arbre.* ;
import yal.arbre.expressions.* ;
import yal.arbre.instructions.* ;
import yal.arbre.instructions.affectation.* ;
import yal.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info){

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info){
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, ECRIRE, LIRE, EGAL;
terminal String    IDF, CSTENTIERE, TYPE;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, INST, LDECL, DECL, AFF ;
non terminal Expression EXP ;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=     PROGRAMME  IDF  DEBUT  LINST:li  FIN
                {:
                    RESULT = li ;
                :}
        |
                PROGRAMME  IDF  DEBUT  LDECL:ld  LINST:li  FIN
                {:
                    BlocDInstructions bi = new BlocDInstructions(ldleft+1);
                    bi.ajouter(ld);
                    bi.ajouter(li);
                    RESULT = bi;
                :}
                ;

LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

LDECL   ::=     LDECL DECL:i
                {: RESULT = i; :}
        |
                DECL:i
                {: RESULT = i; :}
                ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
        |
                LIRE IDF:i POINTVIRGULE
                {: RESULT = new Lire(new Variable(ileft+1,i), ileft + 1); :}
        |
                AFF:i POINTVIRGULE
                {: RESULT = i;  :}
                ;

DECL    ::=     TYPE:t IDF:i POINTVIRGULE
                {:
                    TDS instance = TDS.getInstance();
                    instance.ajouter(ileft+1, new EntreeVariable(i), new SymboleVariable(instance.getDeplacement(),t));
                    RESULT = new AffectationSimple(ileft + 1,new ConstanteEntiere("0",ileft + 1),new Variable(ileft+1,i));
                :}
                ;

AFF  ::=        IDF:i EGAL EXP:e
                {: RESULT = new AffectationSimple(eleft + 1,e,new Variable(eleft+1,i)); :}
                ;

EXP    ::=     CSTENTIERE:c
               {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
        |
               IDF:i
               {: RESULT = new Variable(ileft + 1,i); :}
               ;
