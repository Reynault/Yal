package yal.analyse ;

import yal.analyse.tds.*;
import yal.analyse.tds.entree.*;
import yal.analyse.tds.symbole.*;
import java.util.*;
import yal.arbre.* ;
import yal.arbre.expressions.* ;
import yal.arbre.instructions.* ;
import yal.arbre.instructions.affectation.* ;
import yal.exceptions.AnalyseSyntaxiqueException;
import yal.arbre.expressions.expressionBinaire.expressionArithmetique.*;
import yal.arbre.expressions.expressionBinaire.expressionLogique.*;
import yal.arbre.expressions.expressionUnaire.expressionArithmetique.*;
import yal.arbre.expressions.expressionUnaire.expressionLogique.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info){

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non terminée") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info){
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, ECRIRE, LIRE, EGAL, PARFERMER, PAROUVERT, TANTQUE, FINTANTQUE,
    REPETER, SI, ALORS, SINON, FINSI, FONCTION, RETOURNE, VIRGULE;
terminal String    IDF, CSTENTIERE, TYPE, EGALLOGIQUE, OU, ET, DIFFERENT, INFERIEUR, SUPERIEUR, NON, ADDITION, MOINS,
    DIVISION, MULTIPLICATION;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, LINSTFONCTION, INSTFONCTION, INST, LDECL, DECL, AFF, BOUCLEFONC, CONDITIONFONC, BOUCLE, CONDITION, DECL_VAR, DECL_FONCTION, LDECLFONCTION;
non terminal Expression EXP, OPERBINAIRE;
non terminal ArrayList<Expression> PAR_EFF;
non terminal Integer LISTEPARAM, PARAMETRES;

precedence left OU;
precedence left ET;
precedence left EGALLOGIQUE, DIFFERENT;
precedence left INFERIEUR, SUPERIEUR;
precedence left ADDITION, MOINS;
precedence left DIVISION;
precedence left MULTIPLICATION;
precedence left NON;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;
/*  Programme posséde au moins une instruction, les declarations se trouve avant les instructions
    les declarations ne sont pas garder dans l'arbre abstrait mais seulement les declarations simpre
    (les intialisations a 0)
 */
PROG    ::=     PROGRAMME  IDF  DEBUT  LINST:li  FIN
                {:
                    Programme p = new Programme(0,(BlocDInstructions) li);
                    RESULT = p;
                :}
        |
                PROGRAMME  IDF  DEBUT  LDECL:ld  LINST:li  FIN
                {:
                    BlocDInstructions b = new BlocDInstructions(ldleft+1);
                    b.ajouter(ld);
                    b.ajouter(li);
                    Programme p = new Programme(0,(BlocDInstructions) b);
                    RESULT = p;
                :}
        ;

LINST   ::=     LINST:li  INST:i
                {:
                    ((BlocDInstructions)li).ajouter(i) ;
                    RESULT = li ;
                :}
        |
                INST:i
                {:
                    BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                    b.ajouter(i) ;
                    RESULT = b ;
                :}
        ;

LDECL   ::=     LDECL:li DECL:i
                {:
                    ((BlocDInstructions)li).ajouter(i) ;
                    RESULT = li ;
                :}
        |
                DECL:i
                {:
                    BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                    b.ajouter(i) ;
                    RESULT = b ;
                :}
        ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
        |
                LIRE IDF:i POINTVIRGULE
                {: RESULT = new Lire(new Variable(ileft+1,i), ileft + 1); :}
        |
                AFF:i POINTVIRGULE
                {: RESULT = i;  :}
        |
                BOUCLE:i
                {: RESULT = i; :}
        |
                CONDITION:i
                {: RESULT = i; :}
        ;

LDECLFONCTION   ::= LDECLFONCTION:li DECL_VAR:i
                    {:
                     ((BlocDInstructions)li).ajouter(i) ;
                     RESULT = li ;
                     :}
|
                    DECL_VAR:i
                    {:
                    BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                    b.ajouter(i) ;
                    RESULT = b ;
                    :}
                    ;

BOUCLE  ::=     TANTQUE EXP:e REPETER LINST:l FINTANTQUE
                {:
                BlocDInstructions inst = new BlocDInstructions(eleft + 1);
                inst.ajouter(l);
                RESULT = new Boucle(eleft+1,e,inst); :}
        ;

CONDITION ::=   SI EXP:e ALORS LINST:alors SINON LINST:sinon FINSI
                {:
                BlocDInstructions a = new BlocDInstructions(eleft + 1);
                a.ajouter(alors);
                BlocDInstructions s = new BlocDInstructions(eleft + 1);
                s.ajouter(sinon);
                RESULT = new Condition(eleft + 1, e, a, s); :}
                |
                SI EXP:e ALORS LINST:alors FINSI
                {:
                BlocDInstructions a = new BlocDInstructions(eleft + 1);
                a.ajouter(alors);
                RESULT = new Condition(eleft + 1, e, a, null); :}
                |
                SI EXP:e ALORS SINON LINST:sinon FINSI
                {:
                BlocDInstructions s = new BlocDInstructions(eleft + 1);
                s.ajouter(sinon);
                RESULT = new Condition(eleft + 1, e, null, s); :}
                |
                SI EXP:e ALORS FINSI
                {:
                RESULT = new Condition(eleft + 1, e, null, null); :}
        ;

DECL    ::= DECL_VAR:decl
        {:
             RESULT = decl;
        :}
|
            DECL_FONCTION:decl
        {:
            RESULT = decl;
        :}
        ;

DECL_VAR    ::= TYPE:t IDF:i POINTVIRGULE
                {:
                    TDS instance = TDS.getInstance();
                    instance.ajouter(new EntreeVariable(i, ileft+1),
                        new SymboleVariable(instance.creerDeplacement(), t, GestionnaireNombres.getInstance().getCompteur_blocs()));
                    RESULT = new AffectationSimple(ileft + 1,new ConstanteEntiere("0",ileft + 1),new Variable(ileft+1,i));
                :}
;

DECL_FONCTION   ::= FONCTION IDF:i PARAMETRES:param DEBUT LDECLFONCTION:l LINSTFONCTION:liste FIN
                {:
                    TDS.getInstance().sortieBlock();
                    int nbFonc = GestionnaireNombres.getInstance().nouvelleFonction();
                    TDS.getInstance().ajouter(
                        new EntreeFonction(i, ileft+1, param),
                        new SymboleFonction(nbFonc));
                    RESULT = new Fonction(ileft+1, nbFonc, (BlocDInstructions)liste, param);
                :}
                |
                FONCTION IDF:i PARAMETRES:param DEBUT LINSTFONCTION:liste FIN
                {:
                    TDS.getInstance().sortieBlock();
                    int nbFonc = GestionnaireNombres.getInstance().nouvelleFonction();
                    TDS.getInstance().ajouter(
                        new EntreeFonction(i, ileft+1, param),
                        new SymboleFonction(nbFonc));
                    RESULT = new Fonction(ileft+1, nbFonc, (BlocDInstructions)liste, param);
                :}
;

INSTFONCTION    ::= ECRIRE EXP:e POINTVIRGULE
                    {: RESULT = new Ecrire(e, eleft + 1) ; :}
            |
                    LIRE IDF:i POINTVIRGULE
                    {: RESULT = new Lire(new Variable(ileft+1,i), ileft + 1); :}
            |
                    AFF:i POINTVIRGULE
                    {: RESULT = i;  :}
            |
                    RETOURNE EXP:e POINTVIRGULE
                    {: RESULT = new Retourne(eleft+1, e); :}
            |
                    BOUCLEFONC:i
                    {: RESULT = i; :}
            |
                    CONDITIONFONC:i
                    {: RESULT = i; :}
            ;

BOUCLEFONC      ::= TANTQUE EXP:e REPETER LINSTFONCTION:l FINTANTQUE
                   {:
                   BlocDInstructions inst = new BlocDInstructions(eleft + 1);
                   inst.ajouter(l);
                   RESULT = new Boucle(eleft+1,e,inst); :}
           ;

CONDITIONFONC   ::=  SI EXP:e ALORS LINSTFONCTION:alors SINON LINSTFONCTION:sinon FINSI
                   {:
                   BlocDInstructions a = new BlocDInstructions(eleft + 1);
                   a.ajouter(alors);
                   BlocDInstructions s = new BlocDInstructions(eleft + 1);
                   s.ajouter(sinon);
                   RESULT = new Condition(eleft + 1, e, a, s); :}
                   |
                   SI EXP:e ALORS LINSTFONCTION:alors FINSI
                   {:
                   BlocDInstructions a = new BlocDInstructions(eleft + 1);
                   a.ajouter(alors);
                   RESULT = new Condition(eleft + 1, e, a, null); :}
                   |
                   SI EXP:e ALORS SINON LINSTFONCTION:sinon FINSI
                   {:
                   BlocDInstructions s = new BlocDInstructions(eleft + 1);
                   s.ajouter(sinon);
                   RESULT = new Condition(eleft + 1, e, null, s); :}
                   |
                   SI EXP:e ALORS FINSI
                   {:
                   RESULT = new Condition(eleft + 1, e, null, null); :}
           ;

LINSTFONCTION   ::= LINSTFONCTION:liste INSTFONCTION:i
                {:
                ((BlocDInstructions) liste).ajouter(i);
                RESULT = liste;
                :}
|
                INSTFONCTION:i
                {:
                BlocDInstructions b = new BlocDInstructions(ileft + 1);
                b.ajouter(i);
                RESULT =  b;
                :}
;

PARAMETRES  ::= PAROUVERT PARFERMER
                {:
                    TDS.getInstance().entreBlock();
                    RESULT = 0;
                :}
|
                PAROUVERT LISTEPARAM:e PARFERMER
                {:
                    RESULT = e;
                :}
;

LISTEPARAM  ::= LISTEPARAM:ids POINTVIRGULE TYPE:e IDF:i
                {:
                    // Ajout dans la table
                    TDS instance = TDS.getInstance();
                    instance.ajouter(new EntreeVariable(i, ileft+1),
                        new SymboleVariable(instance.creerDeplacementParam(ids+1), e,
                        GestionnaireNombres.getInstance().getCompteur_blocs()));
                    RESULT = ids+1;
                :}
|
                TYPE:e IDF:i
                {:
                    TDS.getInstance().entreBlock();
                    // Ajout dans la table
                    TDS instance = TDS.getInstance();
                    instance.ajouter(new EntreeVariable(i, ileft+1),
                        new SymboleVariable(instance.creerDeplacementParam(1), e,
                        GestionnaireNombres.getInstance().getCompteur_blocs()));
                    RESULT = 1;
                :}
;

PAR_EFF     ::= PAR_EFF:liste VIRGULE EXP:e
                {:
                    liste.add(e);
                    RESULT = liste;
                :}
|
                EXP:e
                {:
                    ArrayList<Expression> exprs = new ArrayList<Expression>();
                    exprs.add(e);
                    RESULT = exprs;
                :}
;

AFF     ::=     IDF:i EGAL EXP:e
                {: RESULT = new AffectationSimple(eleft + 1,e,new Variable(eleft+1,i)); :}
        ;

EXP     ::=
               OPERBINAIRE:o
               {:
               RESULT = o; :}
        |
               PAROUVERT EXP:e PARFERMER
               {: RESULT = e; :}
        |
               MOINS:e EXP:g
               {: RESULT = new Negatif(eleft + 1,g); :}
        |
               NON:e EXP:g
               {: RESULT = new Non(eleft + 1,g); :}
        |
               CSTENTIERE:c
               {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
        |
               IDF:i
               {: RESULT = new Variable(ileft + 1,i); :}
        |
               IDF:i PAROUVERT  PARFERMER
               {:
                RESULT = new AppelFonction(ileft+1, i, 0, new ArrayList<Expression>());
               :}
        |
               IDF:i PAROUVERT PAR_EFF:e PARFERMER
               {:
                RESULT = new AppelFonction(ileft+1, i, e.size(), e);
               :}
        ;

OPERBINAIRE    ::=
               EXP:g MULTIPLICATION:e EXP:d
               {: RESULT = new Multiplication(eleft + 1,g,d); :}
        |
               EXP:g DIVISION:e EXP:d
               {: RESULT = new Division(eleft + 1,g,d); :}
        |
               EXP:g ADDITION:e EXP:d
               {: RESULT = new Addition(eleft + 1,g,d); :}
        |
               EXP:g MOINS:e EXP:d
               {: RESULT = new Soustraction(eleft + 1,g,d); :}
        |
               EXP:g INFERIEUR:e EXP:d
               {: RESULT = new Inferieur(eleft + 1,g,d); :}
        |
               EXP:g SUPERIEUR:e EXP:d
               {: RESULT = new Superieur(eleft + 1,g,d); :}
        |
               EXP:g EGALLOGIQUE:e EXP:d
               {: RESULT = new Egal(eleft + 1,g,d); :}
        |
               EXP:g DIFFERENT:e EXP:d
               {: RESULT = new Different(eleft + 1,g,d); :}
        |
               EXP:g ET:e EXP:d
               {: RESULT = new Et(eleft + 1,g,d); :}
        |
               EXP:g OU:e EXP:d
               {: RESULT = new Ou(eleft + 1,g,d); :}
        ;